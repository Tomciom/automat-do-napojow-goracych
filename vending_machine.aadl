package vending_machine
public
  with Base_Types;
  with Data_Model;

  data BeverageOrderData
    properties
      Data_Model::Data_Representation => Struct;
  end BeverageOrderData;

  data PaymentInfoData
    properties
      Data_Model::Data_Representation => Struct;
  end PaymentInfoData;

  data WaterConditionData
    properties
      Data_Model::Data_Representation => Struct;
  end WaterConditionData;

  data InventoryStatusData
    properties
      Data_Model::Data_Representation => Struct;
  end InventoryStatusData;

  data MachineDisplayData
    properties
      Data_Model::Data_Representation => Struct;
  end MachineDisplayData;

  data ExternalCommandData
    properties
      Data_Model::Data_Representation => Struct;
  end ExternalCommandData;

  data OutgoingNetworkData
    properties
      Data_Model::Data_Representation => Struct;
  end OutgoingNetworkData;

  data SafetyStatusData
    properties
      Data_Model::Data_Representation => Struct;
  end SafetyStatusData;

  device UserSelectionPanel
    features
      order_details_out: out data port BeverageOrderData;
  end UserSelectionPanel;

  device PaymentTerminalDevice
    features
      payment_status_out: out data port PaymentInfoData;
      initiate_payment_in: in data port Base_Types::Boolean;
  end PaymentTerminalDevice;

  device WaterTemperatureSensorDevice
    features
      current_temp_out: out data port WaterConditionData;
  end WaterTemperatureSensorDevice;

  device HeaterActuatorDevice
    features
      heater_control_in: in data port Base_Types::Boolean;
      emergency_off_in: in data port Base_Types::Boolean;
  end HeaterActuatorDevice;

  device DispensingMechanismDevice
    features
      dispense_ingredient_cmd_in: in data port BeverageOrderData;
      dispense_cup_cmd_in: in data port Base_Types::Boolean;
      emergency_off_in: in data port Base_Types::Boolean;
  end DispensingMechanismDevice;

  device InventorySensorDevice
    features
      inventory_levels_out: out data port InventoryStatusData;
  end InventorySensorDevice;

  device MachineDisplay
    features
      display_update_in: in data port MachineDisplayData;
  end MachineDisplay;

  device NetworkInterfaceModule
    features
      command_from_network_out: out data port ExternalCommandData;
      status_to_network_in: in data port OutgoingNetworkData;
  end NetworkInterfaceModule;

  device EmergencyStopButtonDevice
    features
      emergency_pressed_out: out data port Base_Types::Boolean;
  end EmergencyStopButtonDevice;

  thread UserInputMonitorThread
    features
      selection_panel_signal_in: in data port BeverageOrderData;
      processed_order_out: out data port BeverageOrderData;
  end UserInputMonitorThread;
  thread implementation UserInputMonitorThread.impl
    properties
      Dispatch_Protocol => Periodic; Period => 500ms;
  end UserInputMonitorThread.impl;

  thread PaymentStatusMonitorThread
    features
      payment_terminal_signal_in: in data port PaymentInfoData;
      confirmed_payment_out: out data port PaymentInfoData;
  end PaymentStatusMonitorThread;
  thread implementation PaymentStatusMonitorThread.impl
    properties
      Dispatch_Protocol => Periodic; Period => 500ms;
  end PaymentStatusMonitorThread.impl;

  thread WaterTemperatureMonitorThread
    features
      temp_sensor_reading_in: in data port WaterConditionData;
      current_water_temp_out: out data port WaterConditionData;
  end WaterTemperatureMonitorThread;
  thread implementation WaterTemperatureMonitorThread.impl
    properties
      Dispatch_Protocol => Periodic; Period => 1000ms;
  end WaterTemperatureMonitorThread.impl;

  thread InventoryLevelMonitorThread
    features
      inventory_sensor_reading_in: in data port InventoryStatusData;
      current_inventory_status_out: out data port InventoryStatusData;
  end InventoryLevelMonitorThread;
  thread implementation InventoryLevelMonitorThread.impl
    properties
      Dispatch_Protocol => Periodic; Period => 2000ms;
  end InventoryLevelMonitorThread.impl;

  thread NetworkCommandReceiverThread
    features
      command_from_network_in: in data port ExternalCommandData;
      internal_command_out: out data port ExternalCommandData;
  end NetworkCommandReceiverThread;
  thread implementation NetworkCommandReceiverThread.impl
    properties
      Dispatch_Protocol => Periodic; Period => 1000ms;
  end NetworkCommandReceiverThread.impl;

  thread VendingControlLogicThread
    features
      order_in: in data port BeverageOrderData;
      payment_status_in: in data port PaymentInfoData;
      water_temp_in: in data port WaterConditionData;
      inventory_status_in: in data port InventoryStatusData;
      network_command_in: in data port ExternalCommandData;

      heater_cmd_out: out data port Base_Types::Boolean;
      dispense_ingredient_cmd_out: out data port BeverageOrderData;
      dispense_cup_cmd_out: out data port Base_Types::Boolean;
      display_message_out: out data port MachineDisplayData;
      network_status_packet_out: out data port OutgoingNetworkData;
      initiate_payment_out: out data port Base_Types::Boolean;
  end VendingControlLogicThread;
  thread implementation VendingControlLogicThread.impl
    properties
      Dispatch_Protocol => Periodic; Period => 500ms;
  end VendingControlLogicThread.impl;

  thread SystemHealthMonitorThread
    features
      safety_system_status_in: in data port SafetyStatusData;
      operational_status_in: in data port OutgoingNetworkData;
      combined_network_data_out: out data port OutgoingNetworkData;
  end SystemHealthMonitorThread;
  thread implementation SystemHealthMonitorThread.impl
    properties
      Dispatch_Protocol => Periodic;
      Period => 5000ms;
  end SystemHealthMonitorThread.impl;

  thread CriticalTemperatureMonitorThread
    features
      temp_sensor_reading_in: in data port WaterConditionData;
      critical_temp_limit_exceeded_out: out data port Base_Types::Boolean;
  end CriticalTemperatureMonitorThread;
  thread implementation CriticalTemperatureMonitorThread.impl
    properties
      Dispatch_Protocol => Periodic;
      Period => 200ms;
  end CriticalTemperatureMonitorThread.impl;

  thread EmergencyStopHandlerThread
    features
      emergency_button_signal_in: in data port Base_Types::Boolean;
      emergency_stop_activated_out: out data port Base_Types::Boolean;
  end EmergencyStopHandlerThread;
  thread implementation EmergencyStopHandlerThread.impl
    properties
      Dispatch_Protocol => Periodic;
      Period => 100ms;
  end EmergencyStopHandlerThread.impl;

  thread SafetyCoordinatorThread
    features
      critical_temp_signal_in: in data port Base_Types::Boolean;
      emergency_stop_signal_in: in data port Base_Types::Boolean;

      heater_emergency_off_cmd_out: out data port Base_Types::Boolean;
      dispenser_emergency_off_cmd_out: out data port Base_Types::Boolean;
      current_safety_status_out: out data port SafetyStatusData;
  end SafetyCoordinatorThread;
  thread implementation SafetyCoordinatorThread.impl
    properties
      Dispatch_Protocol => Sporadic;
      Period => 50ms;
  end SafetyCoordinatorThread.impl;


  process InputSensingProcess
    features
      raw_order_in: in data port BeverageOrderData;
      raw_payment_info_in: in data port PaymentInfoData;
      raw_water_temp_in: in data port WaterConditionData;
      raw_inventory_levels_in: in data port InventoryStatusData;

      processed_order_to_logic_out: out data port BeverageOrderData;
      payment_info_to_logic_out: out data port PaymentInfoData;
      water_temp_to_logic_out: out data port WaterConditionData;
      inventory_status_to_logic_out: out data port InventoryStatusData;
  end InputSensingProcess;
  process implementation InputSensingProcess.impl
    subcomponents
      user_monitor: thread UserInputMonitorThread.impl;
      payment_monitor: thread PaymentStatusMonitorThread.impl;
      temp_monitor: thread WaterTemperatureMonitorThread.impl;
      inventory_monitor: thread InventoryLevelMonitorThread.impl;
    connections
      conn_order_panel_to_monitor: port raw_order_in -> user_monitor.selection_panel_signal_in;
      conn_order_monitor_to_logic: port user_monitor.processed_order_out -> processed_order_to_logic_out;
      conn_payment_terminal_to_monitor: port raw_payment_info_in -> payment_monitor.payment_terminal_signal_in;
      conn_payment_monitor_to_logic: port payment_monitor.confirmed_payment_out -> payment_info_to_logic_out;
      conn_temp_sensor_to_monitor: port raw_water_temp_in -> temp_monitor.temp_sensor_reading_in;
      conn_temp_monitor_to_logic: port temp_monitor.current_water_temp_out -> water_temp_to_logic_out;
      conn_inventory_sensor_to_monitor: port raw_inventory_levels_in -> inventory_monitor.inventory_sensor_reading_in;
      conn_inventory_monitor_to_logic: port inventory_monitor.current_inventory_status_out -> inventory_status_to_logic_out;
  end InputSensingProcess.impl;


  process MainControlExecutionProcess
    features
      order_from_sensor_process_in: in data port BeverageOrderData;
      payment_from_sensor_process_in: in data port PaymentInfoData;
      water_temp_from_sensor_process_in: in data port WaterConditionData;
      inventory_from_sensor_process_in: in data port InventoryStatusData;
      command_from_network_module_in: in data port ExternalCommandData;
      safety_system_status_in: in data port SafetyStatusData;

      heater_actuator_cmd_out: out data port Base_Types::Boolean;
      dispenser_ingredient_cmd_out: out data port BeverageOrderData;
      dispenser_cup_cmd_out: out data port Base_Types::Boolean;
      display_update_cmd_out: out data port MachineDisplayData;
      combined_data_to_network_out: out data port OutgoingNetworkData;
      trigger_payment_out: out data port Base_Types::Boolean;
  end MainControlExecutionProcess;
  process implementation MainControlExecutionProcess.impl
    subcomponents
      control_logic: thread VendingControlLogicThread.impl;
      network_receiver: thread NetworkCommandReceiverThread.impl;
      system_health_monitor: thread SystemHealthMonitorThread.impl;
    connections
      conn_order_to_ctrl_logic: port order_from_sensor_process_in -> control_logic.order_in;
      conn_payment_to_ctrl_logic: port payment_from_sensor_process_in -> control_logic.payment_status_in;
      conn_temp_to_ctrl_logic: port water_temp_from_sensor_process_in -> control_logic.water_temp_in;
      conn_inventory_to_ctrl_logic: port inventory_from_sensor_process_in -> control_logic.inventory_status_in;
      conn_net_cmd_to_receiver: port command_from_network_module_in -> network_receiver.command_from_network_in;
      conn_receiver_to_ctrl_logic: port network_receiver.internal_command_out -> control_logic.network_command_in;

      conn_ctrl_logic_to_heater: port control_logic.heater_cmd_out -> heater_actuator_cmd_out;
      conn_ctrl_logic_to_disp_ing: port control_logic.dispense_ingredient_cmd_out -> dispenser_ingredient_cmd_out;
      conn_ctrl_logic_to_disp_cup: port control_logic.dispense_cup_cmd_out -> dispenser_cup_cmd_out;
      conn_ctrl_logic_to_display: port control_logic.display_message_out -> display_update_cmd_out;
      conn_ctrl_logic_to_payment_trigger: port control_logic.initiate_payment_out -> trigger_payment_out;

      conn_safety_status_to_health_monitor: port safety_system_status_in -> system_health_monitor.safety_system_status_in;
      conn_op_status_to_health_monitor: port control_logic.network_status_packet_out -> system_health_monitor.operational_status_in;
      conn_health_monitor_to_process_out: port system_health_monitor.combined_network_data_out -> combined_data_to_network_out;
  end MainControlExecutionProcess.impl;

  process SafetySupervisionProcess
    features
      raw_water_temp_in: in data port WaterConditionData;
      raw_emergency_button_in: in data port Base_Types::Boolean;

      force_heater_off_cmd_out: out data port Base_Types::Boolean;
      force_dispenser_off_cmd_out: out data port Base_Types::Boolean;
      current_safety_status_out: out data port SafetyStatusData;
  end SafetySupervisionProcess;
  process implementation SafetySupervisionProcess.impl
    subcomponents
      temp_safety_check: thread CriticalTemperatureMonitorThread.impl;
      emergency_stop_logic: thread EmergencyStopHandlerThread.impl;
      safety_coordinator: thread SafetyCoordinatorThread.impl;
    connections
      conn_temp_to_safety_check: port raw_water_temp_in -> temp_safety_check.temp_sensor_reading_in;
      conn_button_to_emergency_logic: port raw_emergency_button_in -> emergency_stop_logic.emergency_button_signal_in;

      conn_temp_alert_to_coord: port temp_safety_check.critical_temp_limit_exceeded_out -> safety_coordinator.critical_temp_signal_in;
      conn_emergency_signal_to_coord: port emergency_stop_logic.emergency_stop_activated_out -> safety_coordinator.emergency_stop_signal_in;

      conn_coord_to_heater_cmd: port safety_coordinator.heater_emergency_off_cmd_out -> force_heater_off_cmd_out;
      conn_coord_to_dispenser_cmd: port safety_coordinator.dispenser_emergency_off_cmd_out -> force_dispenser_off_cmd_out;
      conn_coord_to_safety_status: port safety_coordinator.current_safety_status_out -> current_safety_status_out;
  end SafetySupervisionProcess.impl;

  processor Control_Cpu
  end Control_Cpu;

  processor Safety_Cpu
  end Safety_Cpu;

  memory Control_Mem
  end Control_Mem;

  memory Safety_Mem
  end Safety_Mem;

  bus System_Bus
  end System_Bus;

  bus Network_Bus
  end Network_Bus;


  system VendingMachine_Sys
  end VendingMachine_Sys;

  system implementation VendingMachine_Sys.impl
    subcomponents
      sensor_handling: process InputSensingProcess.impl;
      control_execution: process MainControlExecutionProcess.impl;
      safety_supervision: process SafetySupervisionProcess.impl;

      main_cpu: processor Control_Cpu;
      safety_cpu: processor Safety_Cpu;
      main_memory: memory Control_Mem;
      safety_memory: memory Safety_Mem;

      user_panel: device UserSelectionPanel;
      payment_device: device PaymentTerminalDevice;
      temp_sensor: device WaterTemperatureSensorDevice;
      heater: device HeaterActuatorDevice;
      dispenser: device DispensingMechanismDevice;
      inventory_sensor: device InventorySensorDevice;
      main_display: device MachineDisplay;
      network_card: device NetworkInterfaceModule;
      emergency_button: device EmergencyStopButtonDevice;

      system_bus: bus System_Bus;
      network_bus: bus Network_Bus;

    connections
      panel_to_sensors: port user_panel.order_details_out -> sensor_handling.raw_order_in;
      payment_term_to_sensors: port payment_device.payment_status_out -> sensor_handling.raw_payment_info_in;
      temp_sens_to_sensors: port temp_sensor.current_temp_out -> sensor_handling.raw_water_temp_in;
      inv_sens_to_sensors: port inventory_sensor.inventory_levels_out -> sensor_handling.raw_inventory_levels_in;

      order_data_flow: port sensor_handling.processed_order_to_logic_out -> control_execution.order_from_sensor_process_in;
      payment_data_flow: port sensor_handling.payment_info_to_logic_out -> control_execution.payment_from_sensor_process_in;
      temp_data_flow: port sensor_handling.water_temp_to_logic_out -> control_execution.water_temp_from_sensor_process_in;
      inventory_data_flow: port sensor_handling.inventory_status_to_logic_out -> control_execution.inventory_from_sensor_process_in;

      network_cmd_flow: port network_card.command_from_network_out -> control_execution.command_from_network_module_in;
      combined_network_data_flow: port control_execution.combined_data_to_network_out -> network_card.status_to_network_in;

      heater_control_flow: port control_execution.heater_actuator_cmd_out -> heater.heater_control_in;
      dispenser_ing_control_flow: port control_execution.dispenser_ingredient_cmd_out -> dispenser.dispense_ingredient_cmd_in;
      dispenser_cup_control_flow: port control_execution.dispenser_cup_cmd_out -> dispenser.dispense_cup_cmd_in;
      display_update_flow: port control_execution.display_update_cmd_out -> main_display.display_update_in;
      payment_trigger_flow: port control_execution.trigger_payment_out -> payment_device.initiate_payment_in;

      safety_temp_sens_flow: port temp_sensor.current_temp_out -> safety_supervision.raw_water_temp_in;
      emergency_button_flow: port emergency_button.emergency_pressed_out -> safety_supervision.raw_emergency_button_in;

      safety_heater_off_flow: port safety_supervision.force_heater_off_cmd_out -> heater.emergency_off_in;
      safety_dispenser_off_flow: port safety_supervision.force_dispenser_off_cmd_out -> dispenser.emergency_off_in;

      safety_status_to_main_control_flow: port safety_supervision.current_safety_status_out -> control_execution.safety_system_status_in;

    properties
      Actual_Processor_Binding => (reference (main_cpu)) applies to sensor_handling, control_execution;
      Actual_Processor_Binding => (reference (safety_cpu)) applies to safety_supervision;

      Actual_Memory_Binding => (reference (main_memory)) applies to sensor_handling, control_execution;
      Actual_Memory_Binding => (reference (safety_memory)) applies to safety_supervision;

  end VendingMachine_Sys.impl;

end vending_machine;
